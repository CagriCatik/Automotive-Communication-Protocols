"use strict";(self.webpackChunkvns=self.webpackChunkvns||[]).push([[4243],{50901:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"SOVA/getting_started","title":"Getting Started","description":"1. Fundamentals and Context","source":"@site/docs/SOVA/00_getting_started.md","sourceDirName":"SOVA","slug":"/SOVA/getting_started","permalink":"/Vehicle-Network-Standards/docs/SOVA/getting_started","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/SOVA/00_getting_started.md","tags":[],"version":"current","sidebarPosition":0,"frontMatter":{},"sidebar":"sovaSidebar","next":{"title":"Fundamentals and Context","permalink":"/Vehicle-Network-Standards/docs/category/fundamentals-and-context"}}');var r=i(74848),s=i(28453);const c={},l="Getting Started",o={},a=[{value:"1. Fundamentals and Context",id:"1-fundamentals-and-context",level:2},{value:"2. Architecture-Specific Implementations",id:"2-architecture-specific-implementations",level:2},{value:"3. Core Concepts of Service-Oriented Architectures",id:"3-core-concepts-of-service-oriented-architectures",level:2},{value:"4. Technical Frameworks and Protocols",id:"4-technical-frameworks-and-protocols",level:2},{value:"5. Design Patterns for Vehicle Communication",id:"5-design-patterns-for-vehicle-communication",level:2},{value:"6. State Management and Resource Control",id:"6-state-management-and-resource-control",level:2},{value:"7. Access Control and Coordination Patterns",id:"7-access-control-and-coordination-patterns",level:2}];function d(e){const n={h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"getting-started",children:"Getting Started"})}),"\n",(0,r.jsx)(n.h2,{id:"1-fundamentals-and-context",children:"1. Fundamentals and Context"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"1.1 Evolution of Mobility: Towards Software-Driven Vehicles"}),"\n",(0,r.jsx)(n.li,{children:"1.2 Fundamentals of Service-Oriented Vehicle Architecture"}),"\n",(0,r.jsx)(n.li,{children:"1.3 Transition to a New World: Automotive E/E Architecture and Connectivity"}),"\n",(0,r.jsx)(n.li,{children:"1.4 Current Network Architectures"}),"\n",(0,r.jsx)(n.li,{children:"1.5 Transition to Service-Oriented Architecture"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"2-architecture-specific-implementations",children:"2. Architecture-Specific Implementations"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["2.1 Distributed Architecture","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Overview of distributed systems in vehicle architecture"}),"\n",(0,r.jsx)(n.li,{children:"Benefits and challenges of distributed systems"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["2.2 Centralized Architecture","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Transition from distributed to centralized systems"}),"\n",(0,r.jsx)(n.li,{children:"Use cases and performance improvements in centralized architecture"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["2.3 Domain-Centralized Architecture","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Functional segregation into domains (e.g., powertrain, infotainment)"}),"\n",(0,r.jsx)(n.li,{children:"Integration challenges and solutions"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["2.4 Zonal Architecture","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Transition from domain to zonal systems"}),"\n",(0,r.jsx)(n.li,{children:"Benefits of reduced wiring and enhanced scalability"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"3-core-concepts-of-service-oriented-architectures",children:"3. Core Concepts of Service-Oriented Architectures"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"3.1 Principles Behind Service-Oriented Vehicle Architecture"}),"\n",(0,r.jsx)(n.li,{children:"3.2 Service Providers Overview"}),"\n",(0,r.jsx)(n.li,{children:"3.3 Use Cases for Service-Oriented Vehicle Architecture"}),"\n",(0,r.jsx)(n.li,{children:"3.4 Goals of a Service-Oriented Architecture"}),"\n",(0,r.jsx)(n.li,{children:"3.5 Onboard Vehicle API"}),"\n",(0,r.jsx)(n.li,{children:"3.6 Communication Patterns and Architectures"}),"\n",(0,r.jsx)(n.li,{children:"3.7 Goals and Benefits of the Architecture"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"4-technical-frameworks-and-protocols",children:"4. Technical Frameworks and Protocols"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"4.1 Overview of SOME/IP"}),"\n",(0,r.jsx)(n.li,{children:"4.2 Data Exchange Between Service Providers and Clients"}),"\n",(0,r.jsx)(n.li,{children:'4.3 Definition and Explanation of "Service"'}),"\n",(0,r.jsx)(n.li,{children:"4.4 Service-Oriented Communication: Terminology"}),"\n",(0,r.jsx)(n.li,{children:"4.5 Onboard Vehicle API: Interface Design and Documentation"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"5-design-patterns-for-vehicle-communication",children:"5. Design Patterns for Vehicle Communication"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"5.1 Service Design Patterns"}),"\n",(0,r.jsx)(n.li,{children:"5.2 SOME/IP and Client-Server Communication in SOA"}),"\n",(0,r.jsx)(n.li,{children:"5.3 Categorization of Methods in the Onboard Vehicle API"}),"\n",(0,r.jsx)(n.li,{children:"5.4 Response Design Patterns (e.g., Return PDU)"}),"\n",(0,r.jsx)(n.li,{children:"5.5 Handling State Events in Onboard Vehicle API"}),"\n",(0,r.jsx)(n.li,{children:"5.6 Structuring Events in Onboard Vehicle API"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"6-state-management-and-resource-control",children:"6. State Management and Resource Control"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"6.1 Design Goals of State Events for Efficiency"}),"\n",(0,r.jsx)(n.li,{children:"6.2 Fire-and-Forget Methods in Client-Server Communication"}),"\n",(0,r.jsx)(n.li,{children:"6.3 Modifications to Vehicle Resources"}),"\n",(0,r.jsx)(n.li,{children:"6.4 Server Responses to Resource Changes"}),"\n",(0,r.jsx)(n.li,{children:"6.5 Differentiating Resource Feedback in Onboard API"}),"\n",(0,r.jsx)(n.li,{children:"6.6 Standards for Managing Vehicle Resources"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"7-access-control-and-coordination-patterns",children:"7. Access Control and Coordination Patterns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"7.1 Client Categorization for Authorization"}),"\n",(0,r.jsx)(n.li,{children:"7.2 Universally Unique Categories (UUCategory)"}),"\n",(0,r.jsx)(n.li,{children:"7.3 Client Whitelisting for Authorization"}),"\n",(0,r.jsx)(n.li,{children:"7.4 Types and Management of Whitelists"}),"\n",(0,r.jsx)(n.li,{children:"7.5 Access Coordination for Multi-Client Scenarios"}),"\n",(0,r.jsx)(n.li,{children:"7.6 Coordinating Resource Access"}),"\n",(0,r.jsx)(n.li,{children:"7.7 Layering Patterns for Resource Management"}),"\n",(0,r.jsx)(n.li,{children:"7.8 Access Coordination Design Layers"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>l});var t=i(96540);const r={},s=t.createContext(r);function c(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);