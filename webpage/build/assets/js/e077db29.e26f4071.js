"use strict";(self.webpackChunkvns=self.webpackChunkvns||[]).push([[6411],{77049:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"UDS/examples/Write-Data-by-Identifier","title":"Examples - 0x2E","description":"1. Python Example: Write Data By Identifier (0x2E)","source":"@site/docs/UDS/04_examples/06_Write-Data-by-Identifier.md","sourceDirName":"UDS/04_examples","slug":"/UDS/examples/Write-Data-by-Identifier","permalink":"/Vehicle-Network-Standards/docs/UDS/examples/Write-Data-by-Identifier","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/UDS/04_examples/06_Write-Data-by-Identifier.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"udsSidebar","previous":{"title":"Examples - 0x22","permalink":"/Vehicle-Network-Standards/docs/UDS/examples/Read-Data-by-Identifier"},"next":{"title":"Examples - 0x23","permalink":"/Vehicle-Network-Standards/docs/UDS/examples/Read-Memory-by-Adress"}}');var s=t(74848),i=t(28453);const a={sidebar_position:6},o="Examples - 0x2E",d={},c=[{value:"<strong>1. Python Example: Write Data By Identifier (0x2E)</strong>",id:"1-python-example-write-data-by-identifier-0x2e",level:2},{value:"<strong>Python Setup</strong>",id:"python-setup",level:3},{value:"<strong>Explanation</strong>:",id:"explanation",level:3},{value:"<strong>Example Output</strong>:",id:"example-output",level:3},{value:"<strong>2. CAPL Example: Write Data By Identifier (0x2E)</strong>",id:"2-capl-example-write-data-by-identifier-0x2e",level:2},{value:"<strong>CAPL Script:</strong>",id:"capl-script",level:3},{value:"<strong>Explanation</strong>:",id:"explanation-1",level:3},{value:"<strong>Example Output</strong>:",id:"example-output-1",level:3},{value:"<strong>3. Detailed Example of Negative Response Codes in CAPL</strong>",id:"3-detailed-example-of-negative-response-codes-in-capl",level:2},{value:"<strong>Example CAPL Response Simulation:</strong>",id:"example-capl-response-simulation",level:3},{value:"<strong>Example Output with NRC <code>0x22</code></strong>:",id:"example-output-with-nrc-0x22",level:3},{value:"<strong>Conclusion</strong>",id:"conclusion",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"examples---0x2e",children:"Examples - 0x2E"})}),"\n",(0,s.jsx)(n.h2,{id:"1-python-example-write-data-by-identifier-0x2e",children:(0,s.jsx)(n.strong,{children:"1. Python Example: Write Data By Identifier (0x2E)"})}),"\n",(0,s.jsxs)(n.p,{children:["In this example, the Python code communicates with a vehicle's ECU using the ",(0,s.jsx)(n.strong,{children:"CAN protocol"})," to send a ",(0,s.jsx)(n.strong,{children:"Write Data By Identifier (0x2E)"})," request. The code uses the ",(0,s.jsx)(n.code,{children:"python-can"})," library to send and receive CAN messages."]}),"\n",(0,s.jsx)(n.h3,{id:"python-setup",children:(0,s.jsx)(n.strong,{children:"Python Setup"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Install the ",(0,s.jsx)(n.code,{children:"python-can"})," library:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"pip install python-can\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Python Script:"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import can\r\nimport time\r\n\r\n# Define the CAN bus interface (e.g., socketcan for Linux, can0 interface)\r\nbus = can.interface.Bus(channel=\'can0\', bustype=\'socketcan\')\r\n\r\n# Service ID for Write Data By Identifier (0x2E)\r\nSERVICE_ID = 0x2E\r\n\r\n# Example Data Identifier and Data to Write\r\ndata_identifier = 0x1234  # Example Data Identifier for engine calibration\r\ndata_to_write = [0x00, 0x00, 0x00, 0x05]  # Example data (e.g., new calibration value)\r\n\r\n# Function to send the Write Data By Identifier request\r\ndef send_write_data_by_identifier():\r\n    # Construct the request message\r\n    request_message = [SERVICE_ID, data_identifier >> 8, data_identifier & 0xFF] + data_to_write\r\n    # Create a CAN message object\r\n    msg = can.Message(arbitration_id=0x7DF,  # Assuming 0x7DF is the standard CAN ID for diagnostics\r\n                      data=request_message,\r\n                      is_extended_id=False)\r\n    try:\r\n        # Send the message on the CAN bus\r\n        bus.send(msg)\r\n        print(f"Request Sent: {msg}")\r\n    except can.CanError:\r\n        print("Message sending failed.")\r\n\r\n# Function to receive and handle the response\r\ndef receive_response():\r\n    while True:\r\n        msg = bus.recv()  # Wait for a response\r\n        if msg:\r\n            # Print the response message\r\n            print(f"Response Received: {msg}")\r\n            if msg.data[0] == SERVICE_ID:\r\n                # Check for positive or negative response\r\n                if msg.data[1] == 0x00:\r\n                    print("Write Data Successful")\r\n                else:\r\n                    print(f"Error: Negative Response Code {msg.data[1]}")\r\n            break\r\n        time.sleep(0.1)  # Delay to avoid excessive CPU usage\r\n\r\n# Sending the Write Data By Identifier request and waiting for response\r\nsend_write_data_by_identifier()\r\nreceive_response()\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"explanation",children:[(0,s.jsx)(n.strong,{children:"Explanation"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"send_write_data_by_identifier()"})})," function constructs a CAN message for the ",(0,s.jsx)(n.strong,{children:"0x2E Write Data By Identifier"})," service, which consists of the service ID (",(0,s.jsx)(n.code,{children:"0x2E"}),"), the Data Identifier (",(0,s.jsx)(n.code,{children:"0x1234"}),"), and the data to be written (",(0,s.jsx)(n.code,{children:"0x00000005"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"receive_response()"})})," function listens for a response on the CAN bus. It checks if the response matches the requested service ID and prints whether the operation was successful or if an error was encountered, based on the ",(0,s.jsx)(n.strong,{children:"Negative Response Code (NRC)"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"example-output",children:[(0,s.jsx)(n.strong,{children:"Example Output"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-plaintext",children:"Request Sent: Message(arbitration_id=2031, data=[46, 18, 52, 0, 0, 0, 5], is_extended_id=False)\r\nResponse Received: Message(arbitration_id=2031, data=[46, 0, 0, 0, 0, 0, 0, 0], is_extended_id=False)\r\nWrite Data Successful\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This indicates that the ",(0,s.jsx)(n.strong,{children:"Write Data By Identifier (0x2E)"})," request was successful and the data was written to the ECU."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"2-capl-example-write-data-by-identifier-0x2e",children:(0,s.jsx)(n.strong,{children:"2. CAPL Example: Write Data By Identifier (0x2E)"})}),"\n",(0,s.jsxs)(n.p,{children:["In ",(0,s.jsx)(n.strong,{children:"CAPL (CAN Application Programming Language)"}),", we can implement a similar functionality by defining a script that sends a ",(0,s.jsx)(n.strong,{children:"Write Data By Identifier"})," request and processes the response."]}),"\n",(0,s.jsx)(n.h3,{id:"capl-script",children:(0,s.jsx)(n.strong,{children:"CAPL Script:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-capl",children:'variables\r\n{\r\n  msTimer writeTimer;  // Timer to manage write attempt timeouts\r\n}\r\n\r\n// Define constants for the CAN protocol\r\nconst long CAN_ID = 0x7DF; // Standard diagnostic CAN ID (0x7DF)\r\nconst byte SERVICE_ID = 0x2E;  // Write Data By Identifier service ID\r\n\r\n// Example Data Identifier and data to write\r\nconst word dataIdentifier = 0x1234;  // Data Identifier for engine calibration\r\nconst byte dataToWrite[] = {0x00, 0x00, 0x00, 0x05};  // New calibration value to write\r\n\r\n// Function to send Write Data By Identifier request\r\nvoid sendWriteDataByIdentifier()\r\n{\r\n  byte message[8];  // CAN message buffer\r\n  \r\n  // Fill the message with the request data: Service ID, Data Identifier, and data to write\r\n  message[0] = SERVICE_ID;\r\n  message[1] = (dataIdentifier >> 8) & 0xFF;  // High byte of Data Identifier\r\n  message[2] = dataIdentifier & 0xFF;         // Low byte of Data Identifier\r\n  message[3] = dataToWrite[0];  // Data byte 1\r\n  message[4] = dataToWrite[1];  // Data byte 2\r\n  message[5] = dataToWrite[2];  // Data byte 3\r\n  message[6] = dataToWrite[3];  // Data byte 4\r\n\r\n  // Send the message on the CAN network\r\n  output(CAN_ID, message, 7);\r\n  writeTimer = setTimer(1000);  // Set a timer for response timeout\r\n  output("Write Data Request Sent.");\r\n}\r\n\r\n// Function to handle response\r\non message CAN_ID\r\n{\r\n  byte response[8];\r\n  \r\n  // Check if the response is for Write Data By Identifier service\r\n  if (this.message[0] == SERVICE_ID)\r\n  {\r\n    if (this.message[1] == 0x00)  // Positive response: 0x00 means success\r\n    {\r\n      output("Write Data Successful");\r\n    }\r\n    else\r\n    {\r\n      output("Error: Negative Response Code %X", this.message[1]);\r\n    }\r\n    cancelTimer(writeTimer);  // Stop the timeout timer\r\n  }\r\n  else\r\n  {\r\n    output("Unexpected response received.");\r\n  }\r\n}\r\n\r\n// Start the Write Data By Identifier process\r\non start\r\n{\r\n  sendWriteDataByIdentifier();\r\n}\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"explanation-1",children:[(0,s.jsx)(n.strong,{children:"Explanation"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"sendWriteDataByIdentifier()"})," function constructs the CAN message with the ",(0,s.jsx)(n.strong,{children:"Service ID (0x2E)"}),", the ",(0,s.jsx)(n.strong,{children:"Data Identifier (0x1234)"}),", and the data to write (calibration value ",(0,s.jsx)(n.code,{children:"0x00000005"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:["The script listens for the response to this message in the ",(0,s.jsx)(n.code,{children:"on message CAN_ID"})," block. It checks if the first byte of the message matches the service ID (",(0,s.jsx)(n.code,{children:"0x2E"}),") and evaluates the second byte to determine if the operation was successful (positive response code ",(0,s.jsx)(n.code,{children:"0x00"}),")."]}),"\n",(0,s.jsx)(n.li,{children:"If the response is valid, it outputs the success or failure of the write operation."}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"example-output-1",children:[(0,s.jsx)(n.strong,{children:"Example Output"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-plaintext",children:"Write Data Request Sent.\r\nWrite Data Successful\n"})}),"\n",(0,s.jsx)(n.p,{children:"Or if an error occurs:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-plaintext",children:"Write Data Request Sent.\r\nError: Negative Response Code 0x12  // Subfunction Not Supported\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"3-detailed-example-of-negative-response-codes-in-capl",children:(0,s.jsx)(n.strong,{children:"3. Detailed Example of Negative Response Codes in CAPL"})}),"\n",(0,s.jsxs)(n.p,{children:["In this case, let\u2019s simulate a scenario where a ",(0,s.jsx)(n.strong,{children:"Negative Response Code"})," (NRC) is returned. For example, the ECU could reject the write operation due to an invalid data identifier or due to not being in a valid session."]}),"\n",(0,s.jsx)(n.h3,{id:"example-capl-response-simulation",children:(0,s.jsx)(n.strong,{children:"Example CAPL Response Simulation:"})}),"\n",(0,s.jsxs)(n.p,{children:["Assume that when trying to write data to a protected identifier, the ECU returns ",(0,s.jsx)(n.code,{children:"0x22 - Conditions Not Correct"}),":"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"CAPL Script Handling NRC:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-capl",children:'on message CAN_ID\r\n{\r\n  byte response[8];\r\n  \r\n  // Check if the response is for Write Data By Identifier service\r\n  if (this.message[0] == SERVICE_ID)\r\n  {\r\n    // Handle specific Negative Response Codes\r\n    switch (this.message[1])\r\n    {\r\n      case 0x00: // Success\r\n        output("Write Data Successful");\r\n        break;\r\n      case 0x22: // Conditions Not Correct\r\n        output("Error: Conditions Not Correct (0x22)");\r\n        break;\r\n      case 0x31: // Request Out of Range\r\n        output("Error: Request Out of Range (0x31)");\r\n        break;\r\n      case 0x33: // Security Access Denied\r\n        output("Error: Security Access Denied (0x33)");\r\n        break;\r\n      default:\r\n        output("Error: Unknown NRC %X", this.message[1]);\r\n        break;\r\n    }\r\n  }\r\n  else\r\n  {\r\n    output("Unexpected response received.");\r\n  }\r\n}\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"example-output-with-nrc-0x22",children:[(0,s.jsxs)(n.strong,{children:["Example Output with NRC ",(0,s.jsx)(n.code,{children:"0x22"})]}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-plaintext",children:"Write Data Request Sent.\r\nError: Conditions Not Correct (0x22)\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"conclusion",children:(0,s.jsx)(n.strong,{children:"Conclusion"})}),"\n",(0,s.jsxs)(n.p,{children:["These ",(0,s.jsx)(n.strong,{children:"realistic Python"})," and ",(0,s.jsx)(n.strong,{children:"CAPL"})," examples demonstrate how to implement the ",(0,s.jsx)(n.strong,{children:"Write Data By Identifier (0x2E)"})," service for diagnostic communication with ECUs. They include detailed handling of ",(0,s.jsx)(n.strong,{children:"positive responses"})," and ",(0,s.jsx)(n.strong,{children:"negative response codes (NRCs)"}),", such as ",(0,s.jsx)(n.strong,{children:"0x22"})," (Conditions Not Correct),"]}),"\n",(0,s.jsx)(n.p,{children:"which you would encounter in real-world scenarios."}),"\n",(0,s.jsx)(n.p,{children:"By leveraging these examples, you can adapt the code to your specific vehicle's ECUs and the associated diagnostic network, ensuring that the Write Data By Identifier service works correctly in various automotive diagnostic situations."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var r=t(96540);const s={},i=r.createContext(s);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);