"use strict";(self.webpackChunkvns=self.webpackChunkvns||[]).push([[9562],{14293:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>u,default:()=>h,frontMatter:()=>d,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"SOVA/fundamentals-context/evolution","title":"Evolution of Mobility: Towards Software-Driven Vehicles","description":"Service-Oriented Architecture (SOA) ist ein architektonischer Ansatz f\xfcr die Entwicklung von Softwareanwendungen, der auf dem Prinzip der Serviceorientierung basiert. Es stellt ein Paradigma dar, das es erm\xf6glicht, Softwarefunktionen als unabh\xe4ngige und wiederverwendbare Services zu organisieren. Diese Services sind eigenst\xe4ndige, autonome Einheiten, die spezifische Aufgaben erf\xfcllen und \xfcber ein standardisiertes Kommunikationsprotokoll miteinander interagieren k\xf6nnen. Jeder Service stellt dabei eine klar definierte Schnittstelle zur Verf\xfcgung, \xfcber die andere Services mit ihm kommunizieren k\xf6nnen. Ein wesentlicher Vorteil von SOA liegt in der F\xe4higkeit, Services unabh\xe4ngig voneinander zu entwickeln, bereitzustellen und zu aktualisieren. Dies erm\xf6glicht eine hohe Flexibilit\xe4t und Skalierbarkeit von Anwendungen, da Services je nach Bedarf hinzugef\xfcgt, entfernt oder aktualisiert werden k\xf6nnen, ohne dass dies Auswirkungen auf andere Teile des Systems hat. Ein weiterer wichtiger Aspekt von SOA ist die lose Kopplung zwischen den Services. Durch die Verwendung von standardisierten Kommunikationsprotokollen k\xf6nnen Services plattform\xfcbergreifend und unabh\xe4ngig voneinander kommunizieren. Dadurch wird die Interoperabilit\xe4t zwischen verschiedenen Systemen und Technologien erm\xf6glicht. Dar\xfcber hinaus f\xf6rdert SOA die Wiederverwendung von Softwarekomponenten. Services k\xf6nnen in verschiedenen Anwendungen und Kontexten wiederverwendet werden, was zu einer effizienteren Entwicklung f\xfchrt. Dies reduziert den Entwicklungs- und Wartungsaufwand und tr\xe4gt zur Verbesserung der Gesamteffizienz von Softwareprojekten bei.","source":"@site/docs/SOVA/01_fundamentals-context/01_evolution.md","sourceDirName":"SOVA/01_fundamentals-context","slug":"/SOVA/fundamentals-context/evolution","permalink":"/Vehicle-Network-Standards/docs/SOVA/fundamentals-context/evolution","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/SOVA/01_fundamentals-context/01_evolution.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"sovaSidebar","previous":{"title":"Fundamentals and Context","permalink":"/Vehicle-Network-Standards/docs/category/fundamentals-and-context"},"next":{"title":"Fundamentals of Service-Oriented Vehicle Architecture","permalink":"/Vehicle-Network-Standards/docs/SOVA/fundamentals-context/fundamentals-soa"}}');var t=i(74848),s=i(28453);const d={},u="Evolution of Mobility: Towards Software-Driven Vehicles",a={},o=[{value:"Evolution der Mobilit\xe4t: Auf dem Weg zum softwaregesteuerten Fahrzeug",id:"evolution-der-mobilit\xe4t-auf-dem-weg-zum-softwaregesteuerten-fahrzeug",level:2},{value:"Grundlagen der Service-orientierten Fahrzeugarchitektur",id:"grundlagen-der-service-orientierten-fahrzeugarchitektur",level:2},{value:"Richtung einer neuen Welt in der Automobil-E/E-Architektur und Vernetzung",id:"richtung-einer-neuen-welt-in-der-automobil-ee-architektur-und-vernetzung",level:2},{value:"Aktuelle Netzwerkarchitektur",id:"aktuelle-netzwerkarchitektur",level:2},{value:"\xdcbergang zur Service-orientierten Architektur",id:"\xfcbergang-zur-service-orientierten-architektur",level:2},{value:"Grundidee hinter der Service-orientierten Fahrzeugarchitektur",id:"grundidee-hinter-der-service-orientierten-fahrzeugarchitektur",level:2},{value:"Service Provider",id:"service-provider",level:2},{value:"Anwendungsf\xe4lle f\xfcr die Service-orientierte Fahrzeugarchitektur",id:"anwendungsf\xe4lle-f\xfcr-die-service-orientierte-fahrzeugarchitektur",level:2},{value:"Zielbild einer serviceorientierten Fahrzeugarchitektur",id:"zielbild-einer-serviceorientierten-fahrzeugarchitektur",level:2},{value:"Onboard-Vehicle-API",id:"onboard-vehicle-api",level:2},{value:"SOME/IP",id:"someip",level:2},{value:"Allgemeines architektonisches Muster f\xfcr serviceorientierte Kommunikation",id:"allgemeines-architektonisches-muster-f\xfcr-serviceorientierte-kommunikation",level:2},{value:"Ziele der serviceorientierten Architektur",id:"ziele-der-serviceorientierten-architektur",level:2}];function l(e){const n={h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"evolution-of-mobility-towards-software-driven-vehicles",children:"Evolution of Mobility: Towards Software-Driven Vehicles"})}),"\n",(0,t.jsx)(n.h1,{id:"fundamentals-and-context",children:"Fundamentals and Context"}),"\n",(0,t.jsx)(n.p,{children:"Service-Oriented Architecture (SOA) ist ein architektonischer Ansatz f\xfcr die Entwicklung von Softwareanwendungen, der auf dem Prinzip der Serviceorientierung basiert. Es stellt ein Paradigma dar, das es erm\xf6glicht, Softwarefunktionen als unabh\xe4ngige und wiederverwendbare Services zu organisieren. Diese Services sind eigenst\xe4ndige, autonome Einheiten, die spezifische Aufgaben erf\xfcllen und \xfcber ein standardisiertes Kommunikationsprotokoll miteinander interagieren k\xf6nnen. Jeder Service stellt dabei eine klar definierte Schnittstelle zur Verf\xfcgung, \xfcber die andere Services mit ihm kommunizieren k\xf6nnen. Ein wesentlicher Vorteil von SOA liegt in der F\xe4higkeit, Services unabh\xe4ngig voneinander zu entwickeln, bereitzustellen und zu aktualisieren. Dies erm\xf6glicht eine hohe Flexibilit\xe4t und Skalierbarkeit von Anwendungen, da Services je nach Bedarf hinzugef\xfcgt, entfernt oder aktualisiert werden k\xf6nnen, ohne dass dies Auswirkungen auf andere Teile des Systems hat. Ein weiterer wichtiger Aspekt von SOA ist die lose Kopplung zwischen den Services. Durch die Verwendung von standardisierten Kommunikationsprotokollen k\xf6nnen Services plattform\xfcbergreifend und unabh\xe4ngig voneinander kommunizieren. Dadurch wird die Interoperabilit\xe4t zwischen verschiedenen Systemen und Technologien erm\xf6glicht. Dar\xfcber hinaus f\xf6rdert SOA die Wiederverwendung von Softwarekomponenten. Services k\xf6nnen in verschiedenen Anwendungen und Kontexten wiederverwendet werden, was zu einer effizienteren Entwicklung f\xfchrt. Dies reduziert den Entwicklungs- und Wartungsaufwand und tr\xe4gt zur Verbesserung der Gesamteffizienz von Softwareprojekten bei."}),"\n",(0,t.jsx)(n.h2,{id:"evolution-der-mobilit\xe4t-auf-dem-weg-zum-softwaregesteuerten-fahrzeug",children:"Evolution der Mobilit\xe4t: Auf dem Weg zum softwaregesteuerten Fahrzeug"}),"\n",(0,t.jsx)(n.p,{children:'Der moderne Kunde strebt nach einem Fahrzeug, das nicht nur funktionell ist, sondern auch als ein ansprechendes und personalisiertes Produkt wahrgenommen wird. Dabei liegt der Schl\xfcssel in der Entwicklung nach dem Grundsatz des "kundenorientierten Designs", welcher betont, dass die Entwickler nicht identisch mit den Endnutzern sind. Das Ziel ist es, dem Kunden Features anzubieten, die ihn begeistern und sein Leben erleichtern. Ein herausragendes Beispiel hierf\xfcr sind die Features von Tesla, die Kunden begeistern. Bei Tesla hat der Kunde die M\xf6glichkeit, das Verhalten seines Fahrzeugs nach seinen individuellen Vorlieben anzupassen und es sogar selbst zu "programmieren". Das Fahrzeug wird somit zu einem pers\xf6nlichen Produkt, vergleichbar mit einem Smartphone, das ma\xdfgeschneiderte L\xf6sungen und Anwendungen f\xfcr den modernen Menschen bietet. Die Unternehmensmission zielt darauf ab, Luxus mit modernster Technologie zu verbinden und aufregende, kundenorientierte Funktionen anzubieten. Besonders das autonome Fahren er\xf6ffnet dem Kunden ein v\xf6llig neues Fahrerlebnis. Es geht darum, ein Fahrzeug nicht mehr nur als einfaches Fortbewegungsmittel zu betrachten, sondern als eine personalisierte Umgebung, in der der Kunde neue Funktionen und Features nach Bedarf konfigurieren und erleben kann. Die Zukunft der Mobilit\xe4t geh\xf6rt den Unternehmen, die Produkte entwickeln, die nahtlos in die digital vernetzten Lebensr\xe4ume integriert werden k\xf6nnen. Es wird angestrebt, neue Technologien und Infrastrukturen zu schaffen, um das Auto zu einem innovativen und transformative Produkt zu machen. Ziel ist es, ein digitales \xd6kosystem in ein Fahrzeug zu integrieren, wodurch Entwicklern die M\xf6glichkeit gegeben wird, Funktionen bereitzustellen und zu nutzen, um dem Kunden flexible Features nach Bedarf anzubieten. Die entscheidende Frage stellt sich, wie es m\xf6glich ist, ein "Software-getriebenes Auto" zu entwickeln, das es erlaubt, neue Funktionen und Features w\xe4hrend des Lebenszyklus flexibel anzupassen und bereitzustellen. Hierbei Der moderne Kunde strebt nach einem Fahrzeug, das nicht nur funktionell ist, sondern auch als ein ansprechendes und personalisiertes Produkt wahrgenommen wird. Dabei liegt der Schl\xfcssel in der Entwicklung nach dem Grundsatz des "kundenorientierten Designs", welcher betont, dass die Entwickler nicht identisch mit den Endnutzern sind. Das Ziel ist es, dem Kunden Features anzubieten, die ihn begeistern und sein Leben erleichtern. Ein herausragendes Beispiel hierf\xfcr sind die Features von Tesla, die Kunden begeistern. Bei Tesla hat der Kunde die M\xf6glichkeit, das Verhalten seines Fahrzeugs nach seinen individuellen Vorlieben anzupassen und es sogar selbst zu "programmieren". Das Fahrzeug wird somit zu einem pers\xf6nlichen Produkt, vergleichbar mit einem Smartphone, das ma\xdfgeschneiderte L\xf6sungen und Anwendungen f\xfcr den modernen Menschen bietet. Die Unternehmensmission zielt darauf ab, Luxus mit modernster Technologie zu verbinden und aufregende, kundenorientierte Funktionen anzubieten. Besonders das autonome Fahren er\xf6ffnet dem Kunden ein v\xf6llig neues Fahrerlebnis. Es geht darum, ein Fahrzeug nicht mehr nur als einfaches Fortbewegungsmittel zu betrachten, sondern als eine personalisierte Umgebung, in der der Kunde neue Funktionen und Features nach Bedarf konfigurieren und erleben kann. Die Zukunft der Mobilit\xe4t geh\xf6rt den Unternehmen, die Produkte entwickeln, die nahtlos in die digital vernetzten Lebensr\xe4ume integriert werden k\xf6nnen. Es wird angestrebt, neue Technologien und Infrastrukturen zu schaffen, um das Auto zu einem innovativen und transformative Produkt zu machen. Ziel ist es, ein digitales \xd6kosystem in ein Fahrzeug zu integrieren, wodurch Entwicklern die M\xf6glichkeit gegeben wird, Funktionen bereitzustellen und zu nutzen, um dem Kunden flexible Features nach Bedarf anzubieten. Die entscheidende Frage stellt sich, wie es m\xf6glich ist, ein "Software-getriebenes Auto" zu entwickeln, das es erlaubt, neue Funktionen und Features w\xe4hrend des Lebenszyklus flexibel anzupassen und bereitzustellen. Hierbei ist ein neues Paradigma in der Fahrzeugvernetzung und E/E Architektur vonn\xf6ten. Eine service-orientierte Fahrzeugarchitektur, die die Integration von service-orientierter Kommunikation ins Fahrzeugnetzwerk erm\xf6glicht, ist ein zentraler Baustein auf dem Weg zu diesem Ziel.'}),"\n",(0,t.jsx)(n.h2,{id:"grundlagen-der-service-orientierten-fahrzeugarchitektur",children:"Grundlagen der Service-orientierten Fahrzeugarchitektur"}),"\n",(0,t.jsx)(n.p,{children:"Die Serviceorientierte Architektur (SOA) hat ihren Ursprung in der Informationstechnologie und ist dort seit geraumer Zeit etabliert. Sie hat sich im Laufe der Jahre aus der Client/Server Kommunikation weiterentwickelt. Prim\xe4r bedient sich SOA der Nutzung von Services zur Realisierung von Funktionen und gr\xfcndet auf einem grundlegenden Kommunikationsprinzip von Anfrage und Antwort. Ein Service in diesem Kontext repr\xe4sentiert eine klar definierte Funktion. Er ist eigenst\xe4ndig und geschlossen\r\nausgestaltet und ist nicht von anderen Services oder ihrem Kontext abh\xe4ngig. In der Informationstechnologieindustrie wird SOA als ein evolution\xe4rer Schritt in der Softwarearchitektur betrachtet. Durch sie k\xf6nnen IT-Organisationen effektiv die zunehmend komplexen Herausforderungen bew\xe4ltigen. Eine Weiterentwicklung dieses Ansatzes manifestiert sich in den feingranularen Microservices Architekturen."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Kernprinzipien der SOA lassen sich wie folgt zusammenfassen:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"SOA basiert auf dem Prinzip der Client/Server Kommunikation, welches den Datenaustausch zwischen Server und Client(s) beinhaltet."}),"\n",(0,t.jsx)(n.li,{children:"Die SOA bedient sich bew\xe4hrter Kommunikationsprinzipien, um ein Software System, sprich eine Softwarearchitektur, zu entwerfen."}),"\n",(0,t.jsx)(n.li,{children:"SOA stellt Services bereit, die entweder an Endnutzer, Anwender oder Applikationen \xfcbertragen werden, oder aber an andere Services in einem Netzwerk."}),"\n",(0,t.jsx)(n.li,{children:"In einem verteilten System erfolgt die Bereitstellung und Nutzung von Services \xfcber ver\xf6ffentlichte Schnittstellen, die gut zug\xe4nglich und sorgf\xe4ltig beschrieben sind, was ihre Nutzung erleichtert."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"richtung-einer-neuen-welt-in-der-automobil-ee-architektur-und-vernetzung",children:"Richtung einer neuen Welt in der Automobil-E/E-Architektur und Vernetzung"}),"\n",(0,t.jsx)(n.p,{children:"Die Einf\xfchrung des neuen Paradigmas der Service-Orientierten Architektur (SOA) hat das bisher vorherrschende Prinzip der signalbasierten Kommunikation innerhalb des Fahrzeugs ver\xe4ndert. Statt die etablierte signalorientierte Fahrzeugkommunikation zu ersetzen, wird sie durch das Prinzip der service-orientierten Kommunikation weiterentwickelt und erg\xe4nzt. In der alten Welt der Fahrzeugkommunikation waren 1:1 Beziehungen zwischen den verschiedenen Komponenten \xfcblich. \xc4nderungen an Systemen oder die Einf\xfchrung neuer Funktionen bedeuteten einen hohen Aufwand, da sie oft eine Anpassung der gesamten Kommunikationsstruktur erforderten. Im Gegensatz dazu bietet die SOA einen grundlegenden Paradigmenwechsel. Hierbei stehen generische Schnittstellen in Form von Service-Interfaces im Mittelpunkt. Mehrere Clients k\xf6nnen diese Schnittstelle nutzen, um auf die Ressourcen des Fahrzeugs zuzugreifen und Funktionen umzusetzen. Dabei nimmt der Service Provider als Server eine zentrale Rolle als Architekturpattern der SOA ein. Diese neue Herangehensweise er\xf6ffnet eine flexiblere Gestaltung der Kommunikation im Fahrzeug. Sie erm\xf6glicht es, Funktionen zu implementieren, ohne die gesamte Kommunikationsstruktur umfassend anpassen zu m\xfcssen. Dies f\xfchrt zu einer h\xf6heren Agilit\xe4t und erleichtert die Integration neuer Features in die bestehende Architektur. Die Evolution von der signalbasierten zur service-orientierten Kommunikation markiert einen bedeutenden Schritt in der Entwicklung der Fahrzeugvernetzung. Sie verspricht eine effizientere und adaptierbare Kommunikationsarchitektur, die den stetig steigenden Anforderungen an moderne Fahrzeuge gerecht wird."}),"\n",(0,t.jsx)(n.h2,{id:"aktuelle-netzwerkarchitektur",children:"Aktuelle Netzwerkarchitektur"}),"\n",(0,t.jsx)(n.p,{children:"Die Fahrzeugkommunikation hat sich seit der Einf\xfchrung der ersten CAN Busse im Fahrzeug stetig weiterentwickelt. Heutzutage basiert sie allgemein auf einem datenstromorientierten Prinzip, das sich auf die signalorientierte Kommunikation gr\xfcndet. Diese Evolution hat zu einer hochkomplexen Netzwerkstruktur gef\xfchrt, in der zahlreiche elektronische Steuerger\xe4te (ECUs), Sensoren, Aktoren und Softwarekomponenten voneinander abh\xe4ngig sind. Die heutige Fahrzeugvernetzung beruht auf spezifischen Signalen, die als Botschaften versendet werden, um eine bestimmte Funktion im Fahrzeug umzusetzen. Dieser Ansatz erm\xf6glicht eine pr\xe4zise Steuerung und Koordination der verschiedenen Komponenten im Fahrzeug, von der Antriebseinheit bis zur Karosserie. Die verschiedenen Dom\xe4nen im Fahrzeug, wie beispielsweise der Antriebsstrang (Powertrain) und die Karosserie (Body), sind tief miteinander vernetzt und voneinander abh\xe4ngig, um komplexe Funktionen im Fahrzeug zu realisieren. Diese enge Verkn\xfcpfung erfordert eine reibungslose Kommunikation zwischen den einzelnen Komponenten. Signale, die auf dem Subnetz, auf dem sie ben\xf6tigt werden, nicht verf\xfcgbar sind, werden durch ein oder mehrere Gateways geroutet. Diese Gateways spielen eine entscheidende Rolle bei der Weiterleitung von Informationen und stellen sicher, dass die ben\xf6tigten Signale an die richtigen Stellen gelangen. Die steigende Vernetzung im Fahrzeug hat zu einer hochkomplexen Netzwerkstruktur gef\xfchrt, in der jedes von mehreren hundert vernetzten ECUs, Sensoren, Aktoren und Softwarekomponenten von einer Vielzahl anderer ECUs und Software abh\xe4ngig ist. Diese Interdependenzen machen es \xe4u\xdferst herausfordernd, bestehende Signale oder gar die gesamte Netzwerkstruktur zu \xe4ndern, da eine solche Anpassung weitreichende Auswirkungen haben kann. Insgesamt zeigt die Entwicklung der Fahrzeugkommunikation einen klaren Trend von einer simplen, signalorientierten Kommunikation hin zu einer hochkomplexen, datenstromorientierten Netzwerkstruktur. Die Herausforderung liegt nun darin, diese komplexe Architektur effizient zu verwalten und anzupassen, um den stetig steigenden Anforderungen an moderne Fahrzeuge gerecht zu werden."}),"\n",(0,t.jsx)(n.h2,{id:"\xfcbergang-zur-service-orientierten-architektur",children:"\xdcbergang zur Service-orientierten Architektur"}),"\n",(0,t.jsx)(n.p,{children:'Die Implementierung service-orientierter Kommunikation stellt eine bedeutende Herausforderung dar, insbesondere auf der physikalischen und hardwaretechnischen Ebene. Auf dieser Ebene wird bereits durch sogenannte "Central Controller", spezifisch High Performance ECUs als Dom\xe4nenleitrechner, eine Form von service-orientierter Kommunikation repr\xe4sentiert. Diese Central Controller fungieren als zentrale Steuerungseinheiten, die eine hierarchische Netzwerkstruktur realisieren, indem sie die ECUs auf den Ethernet- Backbone b\xfcndeln. Es sei jedoch anzumerken, dass aus kommunikativer Perspektive das Element einer solchen Hierarchiestruktur in den gegenw\xe4rtigen Fahrzeugarchitekturen noch nicht implementiert ist. Die Gateways agieren lediglich als Vermittler, indem sie die Daten auf den Ethernet-Backbone routen. Folglich wird die Kommunikationslogik nach wie vor durch die traditionelle, signal-orientierte Methode gepr\xe4gt, bei der jedes ECU Daten und Informationen direkt mit allen anderen ECUs austauscht. Um eine effektive service-orientierte Kommunikation im Fahrzeug zu etablieren, bedarf es daher einer entscheidenden Weiterentwicklung. Anstelle der bislang verwendeten Gateways, sprich den Central Controllern bzw. Dom\xe4nenleitrechnern, bedarf es zus\xe4tzlich sogenannter Service Provider in jeder Dom\xe4ne. Diese Service Provider fungieren als entscheidende Schnittstellen, die die Transformation von der bisherigen, signal-orientierten Kommunikationslogik hin zu einer service-orientierten Kommunikation erm\xf6glichen. Hierdurch wird eine effiziente und zielgerichtete Kommunikation innerhalb des Fahrzeugsystems erm\xf6glicht, was wiederum die Grundlage f\xfcr weiterf\xfchrende Entwicklungen in der Automobiltechnik schaffen k\xf6nnte.'}),"\n",(0,t.jsx)(n.h2,{id:"grundidee-hinter-der-service-orientierten-fahrzeugarchitektur",children:"Grundidee hinter der Service-orientierten Fahrzeugarchitektur"}),"\n",(0,t.jsx)(n.p,{children:"Die Service-Orientierte Fahrzeugarchitektur (SOA) zielt darauf ab, die Kommunikation innerhalb eines Fahrzeugs zu optimieren und zu vereinfachen. Ein zentraler Ansatz hierbei ist die Entkopplung der Onboard Fahrzeugkommunikation auf dem Ethernet Backbone von der Kommunikation auf den Subnetzwerken in den verschiedenen Dom\xe4nen. Dieser Schritt reduziert die Komplexit\xe4t der Vernetzung erheblich und erm\xf6glicht individuelle Entwicklungszyklen auf unterschiedlichen Architekturleveln. Ein weiterer grundlegender Aspekt besteht in der Hierarchisierung, Abstraktion und Entkopplung von Fahrzeugfunktionen. Diese Ma\xdfnahmen tragen dazu bei, die Interdependenzen zwischen verschiedenen Funktionen zu minimieren und somit die Entwicklung und Wartung von Softwarekomponenten effizienter zu gestalten."}),"\n",(0,t.jsx)(n.p,{children:"Die zugrunde liegende Idee besteht darin, die Kommunikation auf generischen Signalen anstelle von spezifischen Signalen zu basieren. Dies schafft eine flexible Architektur, die es erm\xf6glicht, unterschiedliche Generationen von Komponenten innerhalb der Dom\xe4nen miteinander zu kombinieren. Es ist wichtig anzumerken, dass die Zukunft der E/E Architekturen im Fahrzeug hybride Softwarearchitekturen sein werden. Dabei liegt der Fokus auf service-orientierter Kommunikation, wo immer dies m\xf6glich ist. In F\xe4llen, in denen die Anwendung von SOA nicht m\xf6glich ist, beispielsweise aufgrund spezifischer Anforderungen wie Sicherheit, rechtlicher Restriktionen und anderen Anforderungen, wird auf signal-basierte Kommunikation zur\xfcckgegriffen. Diese hybride Herangehensweise gew\xe4hrleistet eine ausgewogene und effektive Kommunikation im gesamten Fahrzeugsystem."}),"\n",(0,t.jsx)(n.h2,{id:"service-provider",children:"Service Provider"}),"\n",(0,t.jsx)(n.p,{children:"Ein Service Provider in der Kontext von Fahrzeugarchitekturen bezieht sich auf eine Softwarekomponente, die die Bereitstellung von SOME/IP-Diensten auf dem Fahrzeugbackbone, welcher \xfcber ein Ethernet-Netzwerk realisiert ist, \xfcbernimmt. Diese Service Provider sind auf dem zentralen Leitrechner der spezifischen Dom\xe4ne lokalisiert und stellen ein essenzielles Designmuster f\xfcr die Service-orientierte Architektur von Fahrzeugen im Rahmen des Mercedes-Benz Operating Systems (MBOS) dar. Die Hauptaufgaben eines Service Providers umfassen die Umwandlung von signalbasierten Kommunikationsprotokollen in service-orientierte Kommunikation. Dies geschieht durch Abstraktion und Aggregation der internen Kommunikation in der jeweiligen Dom\xe4ne, wodurch hochwertige Informationsinhalte generiert werden. Diese Generierung von Mehrwertinformationen basiert auf der Interpretation von Rohdaten. Dar\xfcber hinaus koordiniert der Service Provider den Zugriff auf seine unterliegenden Systemressourcen, indem er eingehende Anfragen priorisiert und verwaltet. Ein exemplarisches Beispiel hierf\xfcr ist die M\xf6glichkeit, Client- Anfragen nach Dringlichkeit zu priorisieren. Das Vorhandensein eines Service Providers als zentrales Schl\xfcsselmuster in der Service-orientierten Fahrzeugarchitektur von MBOS ist unverzichtbar, wenn eine Funktion mindestens eine Kommunikationsschnittstelle auf der Onboard Vehicle API bereitstellt. Diese Schnittstelle erm\xf6glicht die Interaktion und den Datenaustausch zwischen verschiedenen Komponenten und Systemen innerhalb des Fahrzeugs."}),"\n",(0,t.jsx)(n.h2,{id:"anwendungsf\xe4lle-f\xfcr-die-service-orientierte-fahrzeugarchitektur",children:"Anwendungsf\xe4lle f\xfcr die Service-orientierte Fahrzeugarchitektur"}),"\n",(0,t.jsx)(n.p,{children:"Mit zunehmender Anzahl an ECUs, Sensoren, Aktoren und Softwarekomponenten in einem Fahrzeug steigt die\r\nKomplexit\xe4t und Schwierigkeit, neue Funktionen zu implementieren, ohne Auswirkungen auf alle anderen\r\nKomponenten zu haben. Doch wir streben danach, neue Funktionen und Features ins Fahrzeug zu integrieren, um\r\nein optimales Kundenerlebnis zu bieten.\r\nAus diesem Grund ist die Entwicklung einer flexiblen und anpassungsf\xe4higen Softwarearchitektur f\xfcr Fahrzeuge\r\nvon gro\xdfer Bedeutung. Diese Architektur soll im Fahrzeug Services bereitstellen, um Daten leicht abrufbar und\r\nverwendbar zu machen. Das bedeutet, dass ein Client nicht mehr mit der Interpretation von Daten belastet ist,\r\nsondern bereits aggregierte Daten einfach nutzen kann.\r\nEs gibt konkrete Use Cases, die verdeutlichen, warum die Etablierung einer service-orientierten\r\nFahrzeugarchitektur von entscheidender Bedeutung ist:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Flexibles Steuern von Fahrzeugfunktionen: Aktuell werden mechatronische Funktionen \xfcber spezifische Request-Signale angesteuert, die von bekannten Clients kommen. Jeder Client hat sein eigenes spezifisches Request-Signal, was bedeutet, dass f\xfcr jeden neuen Client eine neue Signaldefinition erstellt werden muss. Zudem m\xfcssen Sender und Empf\xe4nger angepasst werden, was insbesondere bei vielen Beteiligten sehr aufwendig ist. Durch SOA k\xf6nnen diese Client-spezifischen Signale durch generische Signale ersetzt werden, die von mehreren Clients genutzt werden k\xf6nnen. Dies erm\xf6glicht eine n:1 Kommunikation, was die Fahrzeugvernetzung deutlich flexibler macht."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Verteilung von (bereits verarbeiteten) Daten im Fahrzeugnetzwerk: Ein Fahrzeug generiert w\xe4hrend der Fahrt eine Vielzahl von Daten, wie beispielsweise Geschwindigkeit und Au\xdfentemperatur. Diese Daten werden aktuell oft als Rohsignale zwischen den Funktionen verschickt. Die Empf\xe4nger m\xfcssen die Daten selbstst\xe4ndig einsammeln und interpretieren. In einer Service-Orientierten Fahrzeugarchitektur \xfcbernimmt ein dedizierter Server diese Aufgabe. Er interpretiert die Daten, generiert Mehrwert und stellt die aggregierten Daten bereit, was zu einem\r\ndeutlichen Mehrwert im Fahrzeugnetzwerk f\xfchrt. Die Service-Orientierte Architektur (SOA) hat ihren Ursprung in der IT und ist dort seit vielen Jahren fest etabliert. Sie hat sich aus der Client/Server-Kommunikation \xfcber mehrere Stufen hinweg entwickelt. Im Zentrum von SOA stehen Services, die prim\xe4r zur Realisierung von Funktionen verwendet werden. Die Kommunikation erfolgt generell nach dem Prinzip von Anfrage und Antwort (Request-Response). Ein Service in der SOA ist eine klar definierte Funktion. Er ist eigenst\xe4ndig und geschlossen, das hei\xdft, er operiert unabh\xe4ngig von anderen Services oder dem Kontext, in dem er aufgerufen wird. Anders gesagt, ein Service h\xe4ngt nicht vom Zustand anderer Services ab. In der IT-Industrie wird SOA als evolution\xe4rer Schritt in der Softwarearchitektur angesehen. Sie erm\xf6glicht es ITOrganisationen, mit den zunehmend komplexen Herausforderungen umzugehen, denen sie gegen\xfcberstehen. Diese Entwicklung f\xfchrt sogar zu noch feiner granularen Microservices-Architekturen, die die Flexibilit\xe4t und Skalierbarkeit von Anwendungen weiter verbessern."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Kernprinzipien der Service-Orientierten Architektur (SOA):"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Client/Server Kommunikation: SOA basiert auf dem Prinzip der Kommunikation zwischen einem Server und einem oder mehreren Clients. Hierbei findet ein Datenaustausch statt, bei dem der Server Services bereitstellt und die Clients diese Services nutzen."}),"\n",(0,t.jsx)(n.li,{children:"Nutzung bew\xe4hrter Kommunikationsprinzipien: SOA nutzt etablierte Kommunikationsprinzipien, um die Architektur eines Software-Systems zu gestalten. Dabei werden bew\xe4hrte Methoden und Technologien aus der IT-Branche angewendet."}),"\n",(0,t.jsx)(n.li,{children:"Bereitstellung von Services: SOA stellt Services bereit, die entweder direkt an Endnutzer, Anwendungen oder Applikationen zur Verf\xfcgung gestellt werden k\xf6nnen. Alternativ k\xf6nnen Services auch von anderen Services in einem Netzwerk genutzt werden."}),"\n",(0,t.jsx)(n.li,{children:"Verwendung von Schnittstellen: In einem verteilten System, wie es bei SOA typisch ist, erfolgt die Bereitstellung und Nutzung von Services \xfcber definierte Schnittstellen. Diese Schnittstellen m\xfcssen zug\xe4nglich, gut beschrieben und daher leicht nutzbar sein. Dadurch wird eine reibungslose Interaktion zwischen den beteiligten Komponenten erm\xf6glicht. Diese Kernprinzipien bilden die Grundlage f\xfcr die Implementierung und Nutzung der Service-Orientierten Architektur. Sie erm\xf6glichen eine flexible, skalierbare und effiziente Gestaltung von Software-Systemen in verschiedenen Anwendungsbereichen."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"zielbild-einer-serviceorientierten-fahrzeugarchitektur",children:"Zielbild einer serviceorientierten Fahrzeugarchitektur"}),"\n",(0,t.jsx)(n.p,{children:"In unserer angestrebten Service-Orientierten Fahrzeugarchitektur (SOA) nehmen sowohl service-orientierte Kommunikation auf dem Ethernet als auch signalbasierte Kommunikation auf mechatronischer Ebene eine zentrale Rolle ein. Diese hybride SOA-Architektur erm\xf6glicht eine effiziente Vernetzung von Fahrzeugfunktionen und -Daten, wobei eine entscheidende Abstraktionsschicht durch die Onboard Vehicle API geschaffen wird. Die Onboard Vehicle API fungiert als eine standardisierte Schnittstelle, die den Zugang zu verschiedenen Fahrzeugfunktionen und -Daten \xfcber sorgf\xe4ltig konzipierte Services erleichtert. Es ist von besonderer Bedeutung zu beachten, dass die Onboard Vehicle API ausschlie\xdflich im Ethernet-Backbone existiert. Dies resultiert aus der Tatsache, dass SOME/IP eine Technologie des Ethernet-Stacks ist und dementsprechend auf dieser Infrastruktur basiert."}),"\n",(0,t.jsx)(n.p,{children:"Dennoch wird durch die Funktionsarchitektur und die entscheidende Rolle der Service Provider ein innovatives Konzept in unserer Architektur umgesetzt. Mithilfe des Schl\xfcsselelements der Service Providers ist es m\xf6glich, Services mit einer Schnittstelle auf der Onboard Vehicle API auch f\xfcr Systeme und Funktionen bereitzustellen, die auf LIN/CAN oder FlexRay Steuerger\xe4ten lokalisiert sind. Dieses Konzept bildet das zentrale Design unserer Architektur. Unser vorrangiges Ziel ist es, SOME/IP Services mit einer Schnittstelle auf der Onboard Vehicle API f\xfcr eine m\xf6glichst breite Palette von Systemen und Funktionen verf\xfcgbar zu machen. Mit anderen Worten, wir streben danach, Services zu entwerfen und zu implementieren, wo immer dies technisch realisierbar ist. Diese Herangehensweise ist entscheidend f\xfcr die Schaffung einer flexiblen und service-orientierten Fahrzeugarchitektur, die den Anforderungen an Vernetzung, Datenaustausch und Funktionalit\xe4t in modernen Fahrzeugen gerecht wird. Sie erm\xf6glicht eine nahtlose Integration und Kommunikation von Systemen auf verschiedenen Ebenen der Fahrzeugarchitektur und tr\xe4gt somit zur Realisierung innovativer und zukunftsf\xe4higer Fahrzeugkonzepte bei."}),"\n",(0,t.jsx)(n.h2,{id:"onboard-vehicle-api",children:"Onboard-Vehicle-API"}),"\n",(0,t.jsx)(n.p,{children:"Die Onboard Vehicle API stellt eine bedeutende Schnittstelle dar, die hochwertigen Inhalt sowohl technisch als auch funktional bereitstellt. Diese Schnittstellen bieten standardisierten Zugriff auf Fahrzeugfunktionen und -daten von hoher Qualit\xe4t. Die API fungiert als eine Abstraktionsschicht, die die signalorientierte Kommunikation auf der mechatronischen Ebene von der serviceorientierten Kommunikation auf den Integrations-ECUs entkoppelt. Die Onboard Vehicle API kann als die Gesamtheit aller SOME/IP-Service-Schnittstellen definiert werden, die hochwertige Inhalte liefern. Dies bezieht sich auf Mehrwertinformationen in Form von interpretierten Daten, die vom Service Provider aus Rohsignalen verarbeitet und bereitgestellt werden. Diese Mehrwertinformationen werden \xfcber die Onboard Vehicle API als abstrahierende Services bereitgestellt. Diese Services k\xf6nnen dann von verschiedenen Clients genutzt werden, um spezifische Anwendungsf\xe4lle im Fahrzeug umzusetzen. Die Onboard Vehicle API schafft somit einen standardisierten Zugang zu Fahrzeugfunktionen und -daten, wobei sie die herk\xf6mmliche signalbasierte Kommunikation auf der mechatronischen Ebene (wie LIN, CAN und FlexRay) von der serviceorientierten Kommunikation \xfcber Ethernet-Integrationssteuerger\xe4te entkoppelt."}),"\n",(0,t.jsx)(n.h2,{id:"someip",children:"SOME/IP"}),"\n",(0,t.jsx)(n.p,{children:"Die service-orientierte Kommunikation \xfcber SOME/IP stellt einen essenziellen Aspekt im Bereich der Fahrzeugkommunikation dar. Diese Middleware erm\xf6glicht die effiziente \xdcbermittlung von Daten zwischen einem Service Provider (Server) und den anfragenden Clients, die Fahrzeugressourcen nutzen m\xf6chten. Im Kontext der Fahrzeugkommunikation ist es von grundlegender Bedeutung, den Datenfluss zwischen diesen Entit\xe4ten zu regeln, um eine reibungslose Interaktion sicherzustellen. Die Notwendigkeit einer standardisierten Schnittstelle f\xfcr den Datenaustausch ergibt sich aus den besonderen Anforderungen, die in der Automobilindustrie an Kommunikationssysteme gestellt werden. Im Allgemeinen werden Schnittstellen in der IT \xfcber etablierte Protokolle wie HTTP, RESTful oder SOAP beschrieben. Allerdings sto\xdfen diese Standards im Kontext von Fahrzeugkommunikation an ihre Grenzen, da sie den speziellen Anforderungen von Embedded Systems in Fahrzeugen nicht gerecht werden k\xf6nnen. Die derzeit dominierende Technologie zur Beschreibung der Client/Server-Kommunikation im Automobilsektor ist SOME/IP. Diese Technologie ist kompatibel mit der Standardsoftware-Welt von AUTOSAR Classic und Adaptive, was ihre Relevanz und weitverbreitete Anwendung im Bereich der Fahrzeugkommunikation unterstreicht. SOME/IP bietet eine standardisierte L\xf6sung, um Daten zwischen Fahrzeugkomponenten auszutauschen, wobei es speziell auf die Anforderungen und Gegebenheiten im Automobilbereich abgestimmt ist."}),"\n",(0,t.jsx)(n.p,{children:"Ein weiterer wichtiger Aspekt ist die Notwendigkeit, qualitativ hochwertige Schnittstellen bereitzustellen, die generisch nutzbar und wiederverwendbar sind. Dies gew\xe4hrleistet, dass mehrere Clients auf dieselben Schnittstellen zugreifen k\xf6nnen, um unterschiedliche Funktionen im Fahrzeug umzusetzen. Um dieses Ziel zu erreichen, m\xfcssen diese Schnittstellen sorgf\xe4ltig standardisiert und umfassend dokumentiert werden. Eine solche Standardisierung und Dokumentation ist unerl\xe4sslich, um eine effiziente und reibungslose Kommunikation in komplexen Fahrzeugsystemen zu gew\xe4hrleisten und die Entwicklung von Anwendungen im Automobilbereich zu erleichtern. Insgesamt spielt die service-orientierte Kommunikation \xfcber SOME/IP eine entscheidende Rolle in der Modernisierung und Verbesserung der Fahrzeugkommunikationstechnologie, indem sie den Bedarf an speziell angepassten Schnittstellen und Middleware-L\xf6sungen deckt."}),"\n",(0,t.jsx)(n.h2,{id:"allgemeines-architektonisches-muster-f\xfcr-serviceorientierte-kommunikation",children:"Allgemeines architektonisches Muster f\xfcr serviceorientierte Kommunikation"}),"\n",(0,t.jsx)(n.p,{children:'Das generelle Architekturpattern f\xfcr service-orientierte Kommunikation, insbesondere im Kontext des Datenaustauschs zwischen einem Service Provider (Server) und den Clients, basiert auf dem Prinzip des Methodenaufrufs und der asynchronen Kommunikation. Im Folgenden wird erl\xe4utert, wie ein solcher Methodenaufruf f\xfcr die Anfrage einer Fahrzeugresource abl\xe4uft: Initiierung des Methodenaufrufs: Der Prozess beginnt damit, dass ein Client, der auf eine bestimmte Ressource im Fahrzeug zugreifen m\xf6chte, die Initiatorrolle einnimmt. Der Client sendet eine Method Call Protocol Data Unit (PDU) an den Server, der hier als Service Provider fungiert. Diese Method Call PDU enth\xe4lt IN-Parameter oder Argumente, die vom Server ben\xf6tigt werden, um die gew\xfcnschte Anfrage f\xfcr den Zugriff auf die Ressource auszuf\xfchren. Ein Beispiel hierf\xfcr k\xf6nnte die Methode "requestWindowPosition" sein, die spezifische Argumente erfordert, um die gew\xfcnschte Position des Fensters zu signalisieren. Diese Argumente werden als IN-Parameter in der Method Call PDU festgelegt. Antwort des Servers: Nachdem der Server die Methodenaufrufanfrage erhalten hat, f\xfchrt er die angeforderte Aktion aus oder plant deren Ausf\xfchrung. Anschlie\xdfend sendet der Server eine Return Protocol Data Unit (PDU) an den anfragenden Client zur\xfcck. Diese Return-PDU enth\xe4lt in der Regel Informationen, die das Ergebnis des Methodenaufrufs beschreiben und dem Client mitteilen, ob die angeforderte Aktion erfolgreich ausgef\xfchrt wurde.'}),"\n",(0,t.jsx)(n.p,{children:"Eine wichtige Neuerung im Rahmen der Service-orientierten Architektur (SOA) besteht darin, dass, wenn eine \xc4nderung des Zustands einer Ressource von einem beliebigen Client angefordert wird, der Server zus\xe4tzlich zur einfachen Return-PDU ein sogenanntes State Event an alle Clients sendet, die sich auf den entsprechenden Service (Dienst) subscribed haben. Dieses State Event enth\xe4lt Informationen \xfcber den neuen Zustand der Ressource, der sich aufgrund der durchgef\xfchrten Aktion ge\xe4ndert hat. Diese Mitteilung des neuen Ressourcenstatus an alle relevanten Clients erm\xf6glicht eine koordinierte und konsistente Aktualisierung der Informationen \xfcber die Ressource in der gesamten Client-Community. Es ist wichtig anzumerken, dass die zugrundeliegende Kommunikationsprotokolltechnologie f\xfcr OVAPI (Open Vehicle Application Programming Interface) das SOME/IP-Protokoll ist, das auf dem Ethernet-Stack basiert. Diese Technologie erm\xf6glicht die effiziente und zuverl\xe4ssige Kommunikation zwischen dem Service Provider (Server) und den Clients im Kontext der Fahrzeugdaten- und Ressourcennutzung."}),"\n",(0,t.jsx)(n.h2,{id:"ziele-der-serviceorientierten-architektur",children:"Ziele der serviceorientierten Architektur"}),"\n",(0,t.jsx)(n.p,{children:"Die Entwicklung einer service-orientierten Fahrzeugarchitektur verfolgt mehrere Ziele, von denen das Hauptziel die Entkopplung des Zugangs zu Fahrzeugressourcen \xfcber die Onboard Vehicle API als zentrale abstrahierende Schnittstelle im Fahrzeug ist. Diese Entkopplung wird mithilfe von Services realisiert, die \xfcber spezielle Client- Server-Schnittstellen, die Methodenaufrufe erm\xf6glichen, einen generischen Zugang zu den Fahrzeugressourcen gew\xe4hren. Dabei bleibt die Fahrzeugressource selbst unver\xe4ndert, sie kann jedoch je nach den W\xfcnschen des Clients, der eine Anfrage stellt, unterschiedliche Zust\xe4nde annehmen, um die gew\xfcnschten Funktionen zu erf\xfcllen. Die Implementierung generischer Signale zur Steuerung und Nutzung von Fahrzeugressourcen stellt jedoch eine komplexe Aufgabe dar und birgt zahlreiche Herausforderungen. Zum Beispiel muss ber\xfccksichtigt werden, wie mit konkurrierenden Anfragen von mehreren Clients auf eine Ressource umgegangen wird. Um solche Fragen zu beantworten, besch\xe4ftigt sich die Forschung intensiv mit der Entwicklung von Design Patterns und Richtlinien f\xfcr die SOA-Architektur und das Design der Onboard Vehicle API. Dies umfasst die Gestaltung der Schnittstellen f\xfcr die Services der Onboard Vehicle API sowie die Auswahl geeigneter Technologien und Protokolle als Datenaustauschformat zwischen dem Service Provider und den anfragenden Clients, um die spezifischen Anforderungen im Bereich der Automobilindustrie zu erf\xfcllen. Dabei ist eine sorgf\xe4ltige Ber\xfccksichtigung von Sicherheit, Skalierbarkeit und Effizienz von entscheidender Bedeutung, um eine zuverl\xe4ssige und leistungsf\xe4hige service-orientierte Fahrzeugarchitektur zu entwickeln."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>d,x:()=>u});var r=i(96540);const t={},s=r.createContext(t);function d(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function u(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);