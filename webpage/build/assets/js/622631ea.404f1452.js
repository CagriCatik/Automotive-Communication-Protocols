"use strict";(self.webpackChunkvns=self.webpackChunkvns||[]).push([[1557],{14387:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"UDS/capl/Log-File-Handling","title":"Log File Handling","description":"---","source":"@site/docs/UDS/06_capl/05_Log-File-Handling.md","sourceDirName":"UDS/06_capl","slug":"/UDS/capl/Log-File-Handling","permalink":"/Vehicle-Network-Standards/docs/UDS/capl/Log-File-Handling","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/UDS/06_capl/05_Log-File-Handling.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{},"sidebar":"udsSidebar","previous":{"title":"Response Parsing (Service Responses)","permalink":"/Vehicle-Network-Standards/docs/UDS/capl/Response-Parsing"}}');var r=s(74848),t=s(28453);const l={},o="Log File Handling",c={},a=[{value:"Overview",id:"overview",level:2},{value:"Purpose",id:"purpose",level:2},{value:"How It Works",id:"how-it-works",level:2},{value:"Implementation",id:"implementation",level:2},{value:"1. Basic Log Example",id:"1-basic-log-example",level:3},{value:"2. Log with Timestamps",id:"2-log-with-timestamps",level:3},{value:"3. Log for Specific Events",id:"3-log-for-specific-events",level:3},{value:"4. Cyclic Logging",id:"4-cyclic-logging",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Benefits",id:"benefits",level:2},{value:"Use Case Example",id:"use-case-example",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"log-file-handling",children:"Log File Handling"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"Log File Handling in CAPL ensures that diagnostic data and test results are stored persistently for future analysis and traceability. This approach complements the trace window, which provides real-time feedback but lacks the permanence needed for detailed reporting or debugging."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"purpose",children:"Purpose"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Persistence: Store critical information about communication events, responses, and errors in a retrievable format."}),"\n",(0,r.jsx)(n.li,{children:"Debugging: Enable detailed post-test analysis of diagnostic sessions."}),"\n",(0,r.jsx)(n.li,{children:"Traceability: Create logs for compliance, auditing, or long-term records."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,r.jsxs)(n.p,{children:["CAPL provides the ",(0,r.jsx)(n.code,{children:"writeToLog"})," function to log messages into a file. You can define the log file's name, format the log content, and include dynamic values (e.g., message IDs, service identifiers, and timestamps)."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,r.jsx)(n.h3,{id:"1-basic-log-example",children:"1. Basic Log Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-capl",children:'on message 0x1E8 { // Assuming 0x1E8 is the ECU response ID\r\n  writeToLog("logfile.txt", "Response received: ID=0x1E8, Byte1=0x%X, Byte2=0x%X", this.byte(1), this.byte(2));\r\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Explanation:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"logfile.txt"}),": Specifies the file name where logs will be stored."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"Response received: ID=0x1E8, Byte1=0x%X, Byte2=0x%X"'}),": The log message with placeholders for dynamic data."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"this.byte(1)"})," and ",(0,r.jsx)(n.code,{children:"this.byte(2)"}),": Data extracted from the incoming message."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"2-log-with-timestamps",children:"2. Log with Timestamps"}),"\n",(0,r.jsx)(n.p,{children:"To include timestamps for each logged event:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-capl",children:'variables {\r\n  char timeStr[20];\r\n}\r\n\r\non message 0x1E8 {\r\n  getSystemTimeStr(timeStr);\r\n  writeToLog("logfile.txt", "[%s] Response: ID=0x1E8, Byte1=0x%X, Byte2=0x%X", timeStr, this.byte(1), this.byte(2));\r\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Explanation:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"getSystemTimeStr(timeStr)"}),": Retrieves the current system time as a string."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"[%s]"}),": Formats the timestamp into the log entry."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"3-log-for-specific-events",children:"3. Log for Specific Events"}),"\n",(0,r.jsx)(n.p,{children:"Use conditional statements to log only specific types of responses (e.g., Negative Response Codes - NRC)."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-capl",children:'on message 0x1E8 {\r\n  if (this.byte(1) == 0x7F) { // Check for Negative Response\r\n    int nrc = this.byte(2);  // Extract the NRC\r\n    writeToLog("logfile.txt", "NRC received: 0x%X for Service: 0x%X", nrc, this.byte(1));\r\n  } else {\r\n    writeToLog("logfile.txt", "Positive Response received for Service: 0x%X", this.byte(1));\r\n  }\r\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Explanation:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Filters and logs only negative or positive responses for diagnostic clarity."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"4-cyclic-logging",children:"4. Cyclic Logging"}),"\n",(0,r.jsx)(n.p,{children:"To log data periodically, use a timer:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-capl",children:'variables {\r\n  char timeStr[20];\r\n}\r\n\r\non timer logTimer {\r\n  getSystemTimeStr(timeStr);\r\n  writeToLog("logfile.txt", "[%s] Cyclic Event: Tester Present Sent", timeStr);\r\n}\r\n\r\non start {\r\n  setTimerCyclic("logTimer", 2000); // Log every 2 seconds\r\n}\r\n\r\non stop {\r\n  cancelTimer("logTimer");\r\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Explanation:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"A cyclic timer ensures periodic entries in the log file."}),"\n",(0,r.jsx)(n.li,{children:"Useful for monitoring recurring events like Tester Present requests."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Organize Log Files:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use distinct file names for each session (e.g., ",(0,r.jsx)(n.code,{children:"session_<timestamp>.txt"}),")."]}),"\n",(0,r.jsx)(n.li,{children:"Separate log files for different services or modules."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Include Contextual Information:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Log relevant message IDs, bytes, and timestamps."}),"\n",(0,r.jsx)(n.li,{children:'Provide meaningful descriptions (e.g., "Service 0x10: Programming Session Started").'}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Error Management:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Highlight errors or unexpected events using tags like ",(0,r.jsx)(n.code,{children:"[ERROR]"})," or ",(0,r.jsx)(n.code,{children:"[WARNING]"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Log Rotation:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Implement log rotation to manage file sizes and prevent overwriting."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"benefits",children:"Benefits"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Traceability: Ensures that all diagnostic interactions are recorded for compliance or debugging."}),"\n",(0,r.jsx)(n.li,{children:"Debugging Efficiency: Logs provide granular details that simplify issue resolution."}),"\n",(0,r.jsx)(n.li,{children:"Automated Analysis: Log files can be parsed programmatically to generate reports or identify anomalies."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"use-case-example",children:"Use Case Example"}),"\n",(0,r.jsx)(n.p,{children:"Scenario: Logging the Tester Present service's activity along with timestamps."}),"\n",(0,r.jsx)(n.p,{children:"Implementation:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-capl",children:'variables {\r\n  char timeStr[20];\r\n  message testerPresentMessage;\r\n}\r\n\r\non start {\r\n  // Initialize Tester Present Message\r\n  testerPresentMessage.id = 0x1E0;\r\n  testerPresentMessage.dlc = 8;\r\n  testerPresentMessage.byte(0) = 0x02;\r\n  testerPresentMessage.byte(1) = 0x3E;\r\n  testerPresentMessage.byte(2) = 0x00;\r\n\r\n  setTimerCyclic("testerPresentLogTimer", 2000); // Log every 2 seconds\r\n}\r\n\r\non timer testerPresentLogTimer {\r\n  getSystemTimeStr(timeStr);\r\n  writeToLog("logfile.txt", "[%s] Tester Present sent: ID=0x1E0", timeStr);\r\n  output(testerPresentMessage);\r\n}\r\n\r\non stop {\r\n  cancelTimer("testerPresentLogTimer");\r\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Expected Log Output:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"[2025-01-01 10:00:00] Tester Present sent: ID=0x1E0\r\n[2025-01-01 10:00:02] Tester Present sent: ID=0x1E0\r\n[2025-01-01 10:00:04] Tester Present sent: ID=0x1E0\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(n.p,{children:"Log File Handling in CAPL enhances the traceability, debugging, and analysis of UDS diagnostic sessions. By implementing structured, timestamped logs, you can ensure a robust and efficient testing workflow."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var i=s(96540);const r={},t=i.createContext(r);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);